/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/15c6bdf0-d871-4088-8d22-0c3168054851

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String fire;
  String smoke;
  float humi;
  float temp;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <DHT.h>


// Pin Declaration
int redLed = D1;
int greenLed = D2;
int buzzer = D3;
int smokeA0 = A0;
int flame_sensor = D4;

//Variables Declaration
float sensorThres1 = 200;      // Your threshold value1
float sensorThres2 = 600;      // Your threshold value2
int flame_detected;   //Stores flame state
float analogSensor;   //Stores smoke value
String smokeStatus;
String fireStatus;
const char* host = "maker.ifttt.com";

#define DHTPIN D5
#define DHTTYPE DHT11   // DHT 11

DHT dht(DHTPIN, DHTTYPE);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  pinMode(redLed, OUTPUT);
  pinMode(greenLed, OUTPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(smokeA0, INPUT);
  pinMode(flame_sensor, INPUT);
  digitalWrite(redLed, LOW);
  digitalWrite(greenLed, HIGH);
  fire = "No fire detected.";
  smoke = "No gas detected.";
  dht.begin();

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here




}



/*
  Since Fire is READ_WRITE variable, onFireChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFireChange()  {
  // Add your code here to act upon Fire change
  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println("connection failed");
    return;

  }
  
  flame_detected = digitalRead(flame_sensor);       //Smoke sensor read data and store it to variables flame_detected
  if (flame_detected) {
    
    String url = "/trigger/fire/json/with/key/bfbVKW6CQk8uCkRrO3dn7V";


    Serial.print("Requesting URL: ");
    Serial.println(url);

    client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                 "Host: " + host + "\r\n" +
                 "Connection: close\r\n\r\n");
  }
  
  fire = "Fire Detected!";
  delay(1000);
  fire = "";
  delay(1000);
}


/*
  Since Smoke is READ_WRITE variable, onSmokeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSmokeChange()  {
  // Add your code here to act upon Smoke change

  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println("connection failed");
    return;

  }

  analogSensor = analogRead(smokeA0);           //Smoke sensor read data and store it to variables analogSensor
  if (sensorThres1 < analogSensor < sensorThres2 ) {
    
    String url = "/trigger/smoke1/with/key/bfbVKW6CQk8uCkRrO3dn7V?value1=Flammable+gas+detected";


    Serial.print("Requesting URL: ");
    Serial.println(url);

    client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                 "Host: " + host + "\r\n" +
                 "Connection: close\r\n\r\n");
    
    smoke = "Flamable gas detected.";
    delay(1000);
    smoke = "";
    delay(1000);
  }
  else if (analogSensor > sensorThres2) {
    
    String url = "/trigger/smoke1/with/key/bfbVKW6CQk8uCkRrO3dn7V?value1=Strong+flammable+gas+detected";


    Serial.print("Requesting URL: ");
    Serial.println(url);

    client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                 "Host: " + host + "\r\n" +
                 "Connection: close\r\n\r\n");
    
    smoke = "Strong flamable gas detected.";
    delay(1000);
    smoke = "";
    delay(1000);
  }


}

/*
  Since Temp is READ_WRITE variable, onTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempChange()  {
  // Add your code here to act upon Temp change
  temp = dht.readTemperature();                     //Read data and store it to variables temp

}

/*
  Since Humi is READ_WRITE variable, onHumiChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumiChange()  {
  // Add your code here to act upon Humi change
  humi = dht.readHumidity();                         //Read data and store it to variables hum

}
